const { VK, Keyboard } = require('vk-io')
const { SessionManager } = require('@vk-io/session')
const { Aki } = require('aki-api')

const { token } = require('./config')

const { updates } = new VK({ token })

const sessionManager = new SessionManager();
updates.on('message_new', sessionManager.middleware)

const answers = ['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é', '–í–æ–∑–º–æ–∂–Ω–æ / —á–∞—Å—Ç–∏—á–Ω–æ', '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç']

const sendNextQuestion = (ctx) => ctx.send({
  message: ctx.session.aki.question,
  keyboard: Keyboard.keyboard(
    answers.map(e => Keyboard.textButton({ label: e }))
  )
})

updates.on('message_new', async (ctx, next) => {
  const { aki } = ctx.session
  if (!aki) return next()

  const answer = answers.indexOf(ctx.text)
  if (answers === -1) return sendNextQuestion(ctx)

  await aki.step(answer)
  if (aki.progress >= 85) {
    await aki.win()
    const [answer] = aki.answers

    await ctx.sendPhotos({ value: answer.absolute_picture_path }, {
      message: `–≠—Ç–æ ${answer.name} (${answer.description})?`,
      keyboard: Keyboard.builder()
        .textButton({ label: '–î–∞' })
        .textButton({ label: '–ù–µ—Ç' })
    })

    ctx.session.aki = null
  } else {
    sendNextQuestion(ctx)
  }
})

updates.on('message_new', async ctx => {
  if (['–î–∞', '–ù–µ—Ç'].includes(ctx.text)) {
    let text = ctx.text === '–î–∞' ? '–£—Ä–∞! –Ø –≤—ã–∏–≥—Ä–∞–ª üòå' : '–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –ø–æ–±–µ–¥–∏–ª!'
    text += '\n\n–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É'

    return ctx.send(text, { keyboard: Keyboard.keyboard([]) })
  }

  ctx.session.aki = new Aki('ru')
  await ctx.session.aki.start()
  await ctx.send('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!')
  sendNextQuestion(ctx)
})

updates.start()
